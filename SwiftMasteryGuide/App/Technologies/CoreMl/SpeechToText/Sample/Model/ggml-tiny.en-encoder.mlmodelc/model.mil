program(1.0)
[buildInfo = dict<tensor<string, []>, tensor<string, []>>({{"coremlc-component-MIL", "3402.3.2"}, {"coremlc-version", "3402.4.1"}, {"coremltools-component-torch", "2.8.0"}, {"coremltools-version", "7.0"}})]
{
    func main<ios15>(tensor<fp32, [1, 80, 3000]> logmel_data) {
            tensor<int32, []> var_16 = const()[name = tensor<string, []>("op_16"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> var_24 = const()[name = tensor<string, []>("op_24"), val = tensor<int32, [1]>([1])];
            tensor<int32, [1]> var_26 = const()[name = tensor<string, []>("op_26"), val = tensor<int32, [1]>([1])];
            tensor<string, []> var_28_pad_type_0 = const()[name = tensor<string, []>("op_28_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> var_28_pad_0 = const()[name = tensor<string, []>("op_28_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> logmel_data_to_fp16_dtype_0 = const()[name = tensor<string, []>("logmel_data_to_fp16_dtype_0"), val = tensor<string, []>("fp16")];
            tensor<fp16, [384, 80, 3]> weight_3_to_fp16 = const()[name = tensor<string, []>("weight_3_to_fp16"), val = tensor<fp16, [384, 80, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(64)))];
            tensor<fp16, [384]> bias_3_to_fp16 = const()[name = tensor<string, []>("bias_3_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(184448)))];
            tensor<fp16, [1, 80, 3000]> cast_295 = cast(dtype = logmel_data_to_fp16_dtype_0, x = logmel_data)[name = tensor<string, []>("cast_295")];
            tensor<fp16, [1, 384, 3000]> var_28_cast = conv(bias = bias_3_to_fp16, dilations = var_26, groups = var_16, pad = var_28_pad_0, pad_type = var_28_pad_type_0, strides = var_24, weight = weight_3_to_fp16, x = cast_295)[name = tensor<string, []>("op_28_cast")];
            tensor<string, []> input_1_mode_0 = const()[name = tensor<string, []>("input_1_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 384, 3000]> input_1_cast = gelu(mode = input_1_mode_0, x = var_28_cast)[name = tensor<string, []>("input_1_cast")];
            tensor<int32, []> var_33 = const()[name = tensor<string, []>("op_33"), val = tensor<int32, []>(1)];
            tensor<int32, [1]> var_42 = const()[name = tensor<string, []>("op_42"), val = tensor<int32, [1]>([2])];
            tensor<int32, [1]> var_44 = const()[name = tensor<string, []>("op_44"), val = tensor<int32, [1]>([1])];
            tensor<string, []> var_46_pad_type_0 = const()[name = tensor<string, []>("op_46_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [2]> var_46_pad_0 = const()[name = tensor<string, []>("op_46_pad_0"), val = tensor<int32, [2]>([1, 1])];
            tensor<fp16, [384, 384, 3]> weight_7_to_fp16 = const()[name = tensor<string, []>("weight_7_to_fp16"), val = tensor<fp16, [384, 384, 3]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(185280)))];
            tensor<fp16, [384]> bias_7_to_fp16 = const()[name = tensor<string, []>("bias_7_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1070080)))];
            tensor<fp16, [1, 384, 1500]> var_46_cast = conv(bias = bias_7_to_fp16, dilations = var_44, groups = var_33, pad = var_46_pad_0, pad_type = var_46_pad_type_0, strides = var_42, weight = weight_7_to_fp16, x = input_1_cast)[name = tensor<string, []>("op_46_cast")];
            tensor<string, []> x_3_mode_0 = const()[name = tensor<string, []>("x_3_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 384, 1500]> x_3_cast = gelu(mode = x_3_mode_0, x = var_46_cast)[name = tensor<string, []>("x_3_cast")];
            tensor<fp16, [384, 1500]> var_51_to_fp16 = const()[name = tensor<string, []>("op_51_to_fp16"), val = tensor<fp16, [384, 1500]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(1070912)))];
            tensor<fp16, [1, 384, 1500]> var_53_cast = add(x = x_3_cast, y = var_51_to_fp16)[name = tensor<string, []>("op_53_cast")];
            tensor<int32, [1]> inputs_1_axes_0 = const()[name = tensor<string, []>("inputs_1_axes_0"), val = tensor<int32, [1]>([2])];
            tensor<fp16, [1, 384, 1, 1500]> inputs_1_cast = expand_dims(axes = inputs_1_axes_0, x = var_53_cast)[name = tensor<string, []>("inputs_1_cast")];
            tensor<int32, []> var_68 = const()[name = tensor<string, []>("op_68"), val = tensor<int32, []>(1)];
            tensor<bool, []> var_69 = const()[name = tensor<string, []>("op_69"), val = tensor<bool, []>(true)];
            tensor<int32, [1]> var_78 = const()[name = tensor<string, []>("op_78"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_1_cast = reduce_mean(axes = var_78, keep_dims = var_69, x = inputs_1_cast)[name = tensor<string, []>("channels_mean_1_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_1_cast = sub(x = inputs_1_cast, y = channels_mean_1_cast)[name = tensor<string, []>("zero_mean_1_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_1_cast = mul(x = zero_mean_1_cast, y = zero_mean_1_cast)[name = tensor<string, []>("zero_mean_sq_1_cast")];
            tensor<int32, [1]> var_82 = const()[name = tensor<string, []>("op_82"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_83_cast = reduce_mean(axes = var_82, keep_dims = var_69, x = zero_mean_sq_1_cast)[name = tensor<string, []>("op_83_cast")];
            tensor<fp16, []> var_84_to_fp16 = const()[name = tensor<string, []>("op_84_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_85_cast = add(x = var_83_cast, y = var_84_to_fp16)[name = tensor<string, []>("op_85_cast")];
            tensor<fp16, []> denom_1_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_1_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_1_cast = rsqrt(epsilon = denom_1_epsilon_0_to_fp16, x = var_85_cast)[name = tensor<string, []>("denom_1_cast")];
            tensor<fp16, [1, 384, 1, 1500]> out_1_cast = mul(x = zero_mean_1_cast, y = denom_1_cast)[name = tensor<string, []>("out_1_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_89_to_fp16 = const()[name = tensor<string, []>("op_89_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2222976)))];
            tensor<fp16, [1, 384, 1, 1500]> var_90_cast = add(x = out_1_cast, y = var_89_to_fp16)[name = tensor<string, []>("op_90_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_92_to_fp16 = const()[name = tensor<string, []>("op_92_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2223808)))];
            tensor<fp16, [1, 384, 1, 1500]> input_3_cast = mul(x = var_90_cast, y = var_92_to_fp16)[name = tensor<string, []>("input_3_cast")];
            tensor<int32, [2]> var_100 = const()[name = tensor<string, []>("op_100"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_102 = const()[name = tensor<string, []>("op_102"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> q_1_pad_type_0 = const()[name = tensor<string, []>("q_1_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> q_1_pad_0 = const()[name = tensor<string, []>("q_1_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> var_119_weight_0_to_fp16 = const()[name = tensor<string, []>("op_119_weight_0_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2224640)))];
            tensor<fp16, [384]> var_119_bias_0_to_fp16 = const()[name = tensor<string, []>("op_119_bias_0_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2519616)))];
            tensor<fp16, [1, 384, 1, 1500]> var_119_cast = conv(bias = var_119_bias_0_to_fp16, dilations = var_102, groups = var_68, pad = q_1_pad_0, pad_type = q_1_pad_type_0, strides = var_100, weight = var_119_weight_0_to_fp16, x = input_3_cast)[name = tensor<string, []>("op_119_cast")];
            tensor<int32, [2]> var_106 = const()[name = tensor<string, []>("op_106"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_108 = const()[name = tensor<string, []>("op_108"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> k_1_pad_type_0 = const()[name = tensor<string, []>("k_1_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> k_1_pad_0 = const()[name = tensor<string, []>("k_1_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_0_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_key_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2520448)))];
            tensor<fp16, [1, 384, 1, 1500]> k_1_cast = conv(dilations = var_108, groups = var_68, pad = k_1_pad_0, pad_type = k_1_pad_type_0, strides = var_106, weight = blocks_0_attn_key_weight_to_fp16, x = input_3_cast)[name = tensor<string, []>("k_1_cast")];
            tensor<int32, [2]> var_113 = const()[name = tensor<string, []>("op_113"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_115 = const()[name = tensor<string, []>("op_115"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_117_pad_type_0 = const()[name = tensor<string, []>("op_117_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_117_pad_0 = const()[name = tensor<string, []>("op_117_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_0_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_value_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(2815424)))];
            tensor<fp16, [384]> blocks_0_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_value_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3110400)))];
            tensor<fp16, [1, 384, 1, 1500]> var_117_cast = conv(bias = blocks_0_attn_value_bias_to_fp16, dilations = var_115, groups = var_68, pad = var_117_pad_0, pad_type = var_117_pad_type_0, strides = var_113, weight = blocks_0_attn_value_weight_to_fp16, x = input_3_cast)[name = tensor<string, []>("op_117_cast")];
            tensor<int32, [6]> tile_0 = const()[name = tensor<string, []>("tile_0"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_120_axis_0 = const()[name = tensor<string, []>("op_120_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_120_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_120_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_120_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_120_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_120_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_120_cast_5 = split(axis = var_120_axis_0, split_sizes = tile_0, x = var_119_cast)[name = tensor<string, []>("op_120_cast")];
            tensor<int32, [4]> var_127_perm_0 = const()[name = tensor<string, []>("op_127_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [6]> tile_1 = const()[name = tensor<string, []>("tile_1"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_128_axis_0 = const()[name = tensor<string, []>("op_128_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 384]> transpose_4 = transpose(perm = var_127_perm_0, x = k_1_cast)[name = tensor<string, []>("transpose_4")];
            tensor<fp16, [1, 1500, 1, 64]> var_128_cast_0, tensor<fp16, [1, 1500, 1, 64]> var_128_cast_1, tensor<fp16, [1, 1500, 1, 64]> var_128_cast_2, tensor<fp16, [1, 1500, 1, 64]> var_128_cast_3, tensor<fp16, [1, 1500, 1, 64]> var_128_cast_4, tensor<fp16, [1, 1500, 1, 64]> var_128_cast_5 = split(axis = var_128_axis_0, split_sizes = tile_1, x = transpose_4)[name = tensor<string, []>("op_128_cast")];
            tensor<int32, [6]> tile_2 = const()[name = tensor<string, []>("tile_2"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_135_axis_0 = const()[name = tensor<string, []>("op_135_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_135_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_135_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_135_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_135_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_135_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_135_cast_5 = split(axis = var_135_axis_0, split_sizes = tile_2, x = var_117_cast)[name = tensor<string, []>("op_135_cast")];
            tensor<string, []> aw_1_equation_0 = const()[name = tensor<string, []>("aw_1_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_1_cast = einsum(equation = aw_1_equation_0, values = (var_128_cast_0, var_120_cast_0))[name = tensor<string, []>("aw_1_cast")];
            tensor<string, []> aw_3_equation_0 = const()[name = tensor<string, []>("aw_3_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_3_cast = einsum(equation = aw_3_equation_0, values = (var_128_cast_1, var_120_cast_1))[name = tensor<string, []>("aw_3_cast")];
            tensor<string, []> aw_5_equation_0 = const()[name = tensor<string, []>("aw_5_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_5_cast = einsum(equation = aw_5_equation_0, values = (var_128_cast_2, var_120_cast_2))[name = tensor<string, []>("aw_5_cast")];
            tensor<string, []> aw_7_equation_0 = const()[name = tensor<string, []>("aw_7_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_7_cast = einsum(equation = aw_7_equation_0, values = (var_128_cast_3, var_120_cast_3))[name = tensor<string, []>("aw_7_cast")];
            tensor<string, []> aw_9_equation_0 = const()[name = tensor<string, []>("aw_9_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_9_cast = einsum(equation = aw_9_equation_0, values = (var_128_cast_4, var_120_cast_4))[name = tensor<string, []>("aw_9_cast")];
            tensor<string, []> aw_11_equation_0 = const()[name = tensor<string, []>("aw_11_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_11_cast = einsum(equation = aw_11_equation_0, values = (var_128_cast_5, var_120_cast_5))[name = tensor<string, []>("aw_11_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_154_cast = softmax(axis = var_68, x = aw_1_cast)[name = tensor<string, []>("op_154_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_155_cast = softmax(axis = var_68, x = aw_3_cast)[name = tensor<string, []>("op_155_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_156_cast = softmax(axis = var_68, x = aw_5_cast)[name = tensor<string, []>("op_156_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_157_cast = softmax(axis = var_68, x = aw_7_cast)[name = tensor<string, []>("op_157_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_158_cast = softmax(axis = var_68, x = aw_9_cast)[name = tensor<string, []>("op_158_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_159_cast = softmax(axis = var_68, x = aw_11_cast)[name = tensor<string, []>("op_159_cast")];
            tensor<string, []> var_161_equation_0 = const()[name = tensor<string, []>("op_161_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_161_cast = einsum(equation = var_161_equation_0, values = (var_135_cast_0, var_154_cast))[name = tensor<string, []>("op_161_cast")];
            tensor<string, []> var_163_equation_0 = const()[name = tensor<string, []>("op_163_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_163_cast = einsum(equation = var_163_equation_0, values = (var_135_cast_1, var_155_cast))[name = tensor<string, []>("op_163_cast")];
            tensor<string, []> var_165_equation_0 = const()[name = tensor<string, []>("op_165_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_165_cast = einsum(equation = var_165_equation_0, values = (var_135_cast_2, var_156_cast))[name = tensor<string, []>("op_165_cast")];
            tensor<string, []> var_167_equation_0 = const()[name = tensor<string, []>("op_167_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_167_cast = einsum(equation = var_167_equation_0, values = (var_135_cast_3, var_157_cast))[name = tensor<string, []>("op_167_cast")];
            tensor<string, []> var_169_equation_0 = const()[name = tensor<string, []>("op_169_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_169_cast = einsum(equation = var_169_equation_0, values = (var_135_cast_4, var_158_cast))[name = tensor<string, []>("op_169_cast")];
            tensor<string, []> var_171_equation_0 = const()[name = tensor<string, []>("op_171_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_171_cast = einsum(equation = var_171_equation_0, values = (var_135_cast_5, var_159_cast))[name = tensor<string, []>("op_171_cast")];
            tensor<bool, []> input_5_interleave_0 = const()[name = tensor<string, []>("input_5_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 384, 1, 1500]> input_5_cast = concat(axis = var_68, interleave = input_5_interleave_0, values = (var_161_cast, var_163_cast, var_165_cast, var_167_cast, var_169_cast, var_171_cast))[name = tensor<string, []>("input_5_cast")];
            tensor<int32, [2]> var_176 = const()[name = tensor<string, []>("op_176"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_178 = const()[name = tensor<string, []>("op_178"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_180_pad_type_0 = const()[name = tensor<string, []>("op_180_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_180_pad_0 = const()[name = tensor<string, []>("op_180_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_0_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_out_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3111232)))];
            tensor<fp16, [384]> blocks_0_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_0_attn_out_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3406208)))];
            tensor<fp16, [1, 384, 1, 1500]> var_180_cast = conv(bias = blocks_0_attn_out_bias_to_fp16, dilations = var_178, groups = var_68, pad = var_180_pad_0, pad_type = var_180_pad_type_0, strides = var_176, weight = blocks_0_attn_out_weight_to_fp16, x = input_5_cast)[name = tensor<string, []>("op_180_cast")];
            tensor<fp16, [1, 384, 1, 1500]> inputs_3_cast = add(x = inputs_1_cast, y = var_180_cast)[name = tensor<string, []>("inputs_3_cast")];
            tensor<int32, [1]> var_184 = const()[name = tensor<string, []>("op_184"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_3_cast = reduce_mean(axes = var_184, keep_dims = var_69, x = inputs_3_cast)[name = tensor<string, []>("channels_mean_3_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_3_cast = sub(x = inputs_3_cast, y = channels_mean_3_cast)[name = tensor<string, []>("zero_mean_3_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_3_cast = mul(x = zero_mean_3_cast, y = zero_mean_3_cast)[name = tensor<string, []>("zero_mean_sq_3_cast")];
            tensor<int32, [1]> var_188 = const()[name = tensor<string, []>("op_188"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_189_cast = reduce_mean(axes = var_188, keep_dims = var_69, x = zero_mean_sq_3_cast)[name = tensor<string, []>("op_189_cast")];
            tensor<fp16, []> var_190_to_fp16 = const()[name = tensor<string, []>("op_190_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_191_cast = add(x = var_189_cast, y = var_190_to_fp16)[name = tensor<string, []>("op_191_cast")];
            tensor<fp16, []> denom_3_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_3_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_3_cast = rsqrt(epsilon = denom_3_epsilon_0_to_fp16, x = var_191_cast)[name = tensor<string, []>("denom_3_cast")];
            tensor<fp16, [1, 384, 1, 1500]> out_3_cast = mul(x = zero_mean_3_cast, y = denom_3_cast)[name = tensor<string, []>("out_3_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_195_to_fp16 = const()[name = tensor<string, []>("op_195_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3407040)))];
            tensor<fp16, [1, 384, 1, 1500]> var_196_cast = add(x = out_3_cast, y = var_195_to_fp16)[name = tensor<string, []>("op_196_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_198_to_fp16 = const()[name = tensor<string, []>("op_198_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3407872)))];
            tensor<fp16, [1, 384, 1, 1500]> input_7_cast = mul(x = var_196_cast, y = var_198_to_fp16)[name = tensor<string, []>("input_7_cast")];
            tensor<int32, [2]> var_204 = const()[name = tensor<string, []>("op_204"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_206 = const()[name = tensor<string, []>("op_206"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_9_pad_type_0 = const()[name = tensor<string, []>("input_9_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_9_pad_0 = const()[name = tensor<string, []>("input_9_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [1536, 384, 1, 1]> blocks_0_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_mlp_0_weight_to_fp16"), val = tensor<fp16, [1536, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(3408704)))];
            tensor<fp16, [1536]> blocks_0_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_0_mlp_0_bias_to_fp16"), val = tensor<fp16, [1536]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4588416)))];
            tensor<fp16, [1, 1536, 1, 1500]> input_9_cast = conv(bias = blocks_0_mlp_0_bias_to_fp16, dilations = var_206, groups = var_68, pad = input_9_pad_0, pad_type = input_9_pad_type_0, strides = var_204, weight = blocks_0_mlp_0_weight_to_fp16, x = input_7_cast)[name = tensor<string, []>("input_9_cast")];
            tensor<string, []> input_11_mode_0 = const()[name = tensor<string, []>("input_11_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 1536, 1, 1500]> input_11_cast = gelu(mode = input_11_mode_0, x = input_9_cast)[name = tensor<string, []>("input_11_cast")];
            tensor<int32, [2]> var_212 = const()[name = tensor<string, []>("op_212"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_214 = const()[name = tensor<string, []>("op_214"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_216_pad_type_0 = const()[name = tensor<string, []>("op_216_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_216_pad_0 = const()[name = tensor<string, []>("op_216_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 1536, 1, 1]> blocks_0_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_0_mlp_2_weight_to_fp16"), val = tensor<fp16, [384, 1536, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(4591552)))];
            tensor<fp16, [384]> blocks_0_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_0_mlp_2_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5771264)))];
            tensor<fp16, [1, 384, 1, 1500]> var_216_cast = conv(bias = blocks_0_mlp_2_bias_to_fp16, dilations = var_214, groups = var_68, pad = var_216_pad_0, pad_type = var_216_pad_type_0, strides = var_212, weight = blocks_0_mlp_2_weight_to_fp16, x = input_11_cast)[name = tensor<string, []>("op_216_cast")];
            tensor<fp16, [1, 384, 1, 1500]> inputs_5_cast = add(x = inputs_3_cast, y = var_216_cast)[name = tensor<string, []>("inputs_5_cast")];
            tensor<int32, []> var_225 = const()[name = tensor<string, []>("op_225"), val = tensor<int32, []>(1)];
            tensor<bool, []> var_226 = const()[name = tensor<string, []>("op_226"), val = tensor<bool, []>(true)];
            tensor<int32, [1]> var_235 = const()[name = tensor<string, []>("op_235"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_5_cast = reduce_mean(axes = var_235, keep_dims = var_226, x = inputs_5_cast)[name = tensor<string, []>("channels_mean_5_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_5_cast = sub(x = inputs_5_cast, y = channels_mean_5_cast)[name = tensor<string, []>("zero_mean_5_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_5_cast = mul(x = zero_mean_5_cast, y = zero_mean_5_cast)[name = tensor<string, []>("zero_mean_sq_5_cast")];
            tensor<int32, [1]> var_239 = const()[name = tensor<string, []>("op_239"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_240_cast = reduce_mean(axes = var_239, keep_dims = var_226, x = zero_mean_sq_5_cast)[name = tensor<string, []>("op_240_cast")];
            tensor<fp16, []> var_241_to_fp16 = const()[name = tensor<string, []>("op_241_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_242_cast = add(x = var_240_cast, y = var_241_to_fp16)[name = tensor<string, []>("op_242_cast")];
            tensor<fp16, []> denom_5_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_5_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_5_cast = rsqrt(epsilon = denom_5_epsilon_0_to_fp16, x = var_242_cast)[name = tensor<string, []>("denom_5_cast")];
            tensor<fp16, [1, 384, 1, 1500]> out_5_cast = mul(x = zero_mean_5_cast, y = denom_5_cast)[name = tensor<string, []>("out_5_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_246_to_fp16 = const()[name = tensor<string, []>("op_246_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5772096)))];
            tensor<fp16, [1, 384, 1, 1500]> var_247_cast = add(x = out_5_cast, y = var_246_to_fp16)[name = tensor<string, []>("op_247_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_249_to_fp16 = const()[name = tensor<string, []>("op_249_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5772928)))];
            tensor<fp16, [1, 384, 1, 1500]> input_13_cast = mul(x = var_247_cast, y = var_249_to_fp16)[name = tensor<string, []>("input_13_cast")];
            tensor<int32, [2]> var_257 = const()[name = tensor<string, []>("op_257"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_259 = const()[name = tensor<string, []>("op_259"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> q_3_pad_type_0 = const()[name = tensor<string, []>("q_3_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> q_3_pad_0 = const()[name = tensor<string, []>("q_3_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> var_276_weight_0_to_fp16 = const()[name = tensor<string, []>("op_276_weight_0_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(5773760)))];
            tensor<fp16, [384]> var_276_bias_0_to_fp16 = const()[name = tensor<string, []>("op_276_bias_0_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6068736)))];
            tensor<fp16, [1, 384, 1, 1500]> var_276_cast = conv(bias = var_276_bias_0_to_fp16, dilations = var_259, groups = var_225, pad = q_3_pad_0, pad_type = q_3_pad_type_0, strides = var_257, weight = var_276_weight_0_to_fp16, x = input_13_cast)[name = tensor<string, []>("op_276_cast")];
            tensor<int32, [2]> var_263 = const()[name = tensor<string, []>("op_263"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_265 = const()[name = tensor<string, []>("op_265"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> k_3_pad_type_0 = const()[name = tensor<string, []>("k_3_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> k_3_pad_0 = const()[name = tensor<string, []>("k_3_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_1_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_key_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6069568)))];
            tensor<fp16, [1, 384, 1, 1500]> k_3_cast = conv(dilations = var_265, groups = var_225, pad = k_3_pad_0, pad_type = k_3_pad_type_0, strides = var_263, weight = blocks_1_attn_key_weight_to_fp16, x = input_13_cast)[name = tensor<string, []>("k_3_cast")];
            tensor<int32, [2]> var_270 = const()[name = tensor<string, []>("op_270"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_272 = const()[name = tensor<string, []>("op_272"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_274_pad_type_0 = const()[name = tensor<string, []>("op_274_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_274_pad_0 = const()[name = tensor<string, []>("op_274_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_1_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_value_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6364544)))];
            tensor<fp16, [384]> blocks_1_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_value_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6659520)))];
            tensor<fp16, [1, 384, 1, 1500]> var_274_cast = conv(bias = blocks_1_attn_value_bias_to_fp16, dilations = var_272, groups = var_225, pad = var_274_pad_0, pad_type = var_274_pad_type_0, strides = var_270, weight = blocks_1_attn_value_weight_to_fp16, x = input_13_cast)[name = tensor<string, []>("op_274_cast")];
            tensor<int32, [6]> tile_3 = const()[name = tensor<string, []>("tile_3"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_277_axis_0 = const()[name = tensor<string, []>("op_277_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_277_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_277_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_277_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_277_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_277_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_277_cast_5 = split(axis = var_277_axis_0, split_sizes = tile_3, x = var_276_cast)[name = tensor<string, []>("op_277_cast")];
            tensor<int32, [4]> var_284_perm_0 = const()[name = tensor<string, []>("op_284_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [6]> tile_4 = const()[name = tensor<string, []>("tile_4"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_285_axis_0 = const()[name = tensor<string, []>("op_285_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 384]> transpose_3 = transpose(perm = var_284_perm_0, x = k_3_cast)[name = tensor<string, []>("transpose_3")];
            tensor<fp16, [1, 1500, 1, 64]> var_285_cast_0, tensor<fp16, [1, 1500, 1, 64]> var_285_cast_1, tensor<fp16, [1, 1500, 1, 64]> var_285_cast_2, tensor<fp16, [1, 1500, 1, 64]> var_285_cast_3, tensor<fp16, [1, 1500, 1, 64]> var_285_cast_4, tensor<fp16, [1, 1500, 1, 64]> var_285_cast_5 = split(axis = var_285_axis_0, split_sizes = tile_4, x = transpose_3)[name = tensor<string, []>("op_285_cast")];
            tensor<int32, [6]> tile_5 = const()[name = tensor<string, []>("tile_5"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_292_axis_0 = const()[name = tensor<string, []>("op_292_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_292_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_292_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_292_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_292_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_292_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_292_cast_5 = split(axis = var_292_axis_0, split_sizes = tile_5, x = var_274_cast)[name = tensor<string, []>("op_292_cast")];
            tensor<string, []> aw_13_equation_0 = const()[name = tensor<string, []>("aw_13_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_13_cast = einsum(equation = aw_13_equation_0, values = (var_285_cast_0, var_277_cast_0))[name = tensor<string, []>("aw_13_cast")];
            tensor<string, []> aw_15_equation_0 = const()[name = tensor<string, []>("aw_15_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_15_cast = einsum(equation = aw_15_equation_0, values = (var_285_cast_1, var_277_cast_1))[name = tensor<string, []>("aw_15_cast")];
            tensor<string, []> aw_17_equation_0 = const()[name = tensor<string, []>("aw_17_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_17_cast = einsum(equation = aw_17_equation_0, values = (var_285_cast_2, var_277_cast_2))[name = tensor<string, []>("aw_17_cast")];
            tensor<string, []> aw_19_equation_0 = const()[name = tensor<string, []>("aw_19_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_19_cast = einsum(equation = aw_19_equation_0, values = (var_285_cast_3, var_277_cast_3))[name = tensor<string, []>("aw_19_cast")];
            tensor<string, []> aw_21_equation_0 = const()[name = tensor<string, []>("aw_21_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_21_cast = einsum(equation = aw_21_equation_0, values = (var_285_cast_4, var_277_cast_4))[name = tensor<string, []>("aw_21_cast")];
            tensor<string, []> aw_23_equation_0 = const()[name = tensor<string, []>("aw_23_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_23_cast = einsum(equation = aw_23_equation_0, values = (var_285_cast_5, var_277_cast_5))[name = tensor<string, []>("aw_23_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_311_cast = softmax(axis = var_225, x = aw_13_cast)[name = tensor<string, []>("op_311_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_312_cast = softmax(axis = var_225, x = aw_15_cast)[name = tensor<string, []>("op_312_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_313_cast = softmax(axis = var_225, x = aw_17_cast)[name = tensor<string, []>("op_313_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_314_cast = softmax(axis = var_225, x = aw_19_cast)[name = tensor<string, []>("op_314_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_315_cast = softmax(axis = var_225, x = aw_21_cast)[name = tensor<string, []>("op_315_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_316_cast = softmax(axis = var_225, x = aw_23_cast)[name = tensor<string, []>("op_316_cast")];
            tensor<string, []> var_318_equation_0 = const()[name = tensor<string, []>("op_318_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_318_cast = einsum(equation = var_318_equation_0, values = (var_292_cast_0, var_311_cast))[name = tensor<string, []>("op_318_cast")];
            tensor<string, []> var_320_equation_0 = const()[name = tensor<string, []>("op_320_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_320_cast = einsum(equation = var_320_equation_0, values = (var_292_cast_1, var_312_cast))[name = tensor<string, []>("op_320_cast")];
            tensor<string, []> var_322_equation_0 = const()[name = tensor<string, []>("op_322_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_322_cast = einsum(equation = var_322_equation_0, values = (var_292_cast_2, var_313_cast))[name = tensor<string, []>("op_322_cast")];
            tensor<string, []> var_324_equation_0 = const()[name = tensor<string, []>("op_324_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_324_cast = einsum(equation = var_324_equation_0, values = (var_292_cast_3, var_314_cast))[name = tensor<string, []>("op_324_cast")];
            tensor<string, []> var_326_equation_0 = const()[name = tensor<string, []>("op_326_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_326_cast = einsum(equation = var_326_equation_0, values = (var_292_cast_4, var_315_cast))[name = tensor<string, []>("op_326_cast")];
            tensor<string, []> var_328_equation_0 = const()[name = tensor<string, []>("op_328_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_328_cast = einsum(equation = var_328_equation_0, values = (var_292_cast_5, var_316_cast))[name = tensor<string, []>("op_328_cast")];
            tensor<bool, []> input_15_interleave_0 = const()[name = tensor<string, []>("input_15_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 384, 1, 1500]> input_15_cast = concat(axis = var_225, interleave = input_15_interleave_0, values = (var_318_cast, var_320_cast, var_322_cast, var_324_cast, var_326_cast, var_328_cast))[name = tensor<string, []>("input_15_cast")];
            tensor<int32, [2]> var_333 = const()[name = tensor<string, []>("op_333"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_335 = const()[name = tensor<string, []>("op_335"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_337_pad_type_0 = const()[name = tensor<string, []>("op_337_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_337_pad_0 = const()[name = tensor<string, []>("op_337_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_1_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_out_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6660352)))];
            tensor<fp16, [384]> blocks_1_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_1_attn_out_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6955328)))];
            tensor<fp16, [1, 384, 1, 1500]> var_337_cast = conv(bias = blocks_1_attn_out_bias_to_fp16, dilations = var_335, groups = var_225, pad = var_337_pad_0, pad_type = var_337_pad_type_0, strides = var_333, weight = blocks_1_attn_out_weight_to_fp16, x = input_15_cast)[name = tensor<string, []>("op_337_cast")];
            tensor<fp16, [1, 384, 1, 1500]> inputs_7_cast = add(x = inputs_5_cast, y = var_337_cast)[name = tensor<string, []>("inputs_7_cast")];
            tensor<int32, [1]> var_341 = const()[name = tensor<string, []>("op_341"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_7_cast = reduce_mean(axes = var_341, keep_dims = var_226, x = inputs_7_cast)[name = tensor<string, []>("channels_mean_7_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_7_cast = sub(x = inputs_7_cast, y = channels_mean_7_cast)[name = tensor<string, []>("zero_mean_7_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_7_cast = mul(x = zero_mean_7_cast, y = zero_mean_7_cast)[name = tensor<string, []>("zero_mean_sq_7_cast")];
            tensor<int32, [1]> var_345 = const()[name = tensor<string, []>("op_345"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_346_cast = reduce_mean(axes = var_345, keep_dims = var_226, x = zero_mean_sq_7_cast)[name = tensor<string, []>("op_346_cast")];
            tensor<fp16, []> var_347_to_fp16 = const()[name = tensor<string, []>("op_347_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_348_cast = add(x = var_346_cast, y = var_347_to_fp16)[name = tensor<string, []>("op_348_cast")];
            tensor<fp16, []> denom_7_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_7_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_7_cast = rsqrt(epsilon = denom_7_epsilon_0_to_fp16, x = var_348_cast)[name = tensor<string, []>("denom_7_cast")];
            tensor<fp16, [1, 384, 1, 1500]> out_7_cast = mul(x = zero_mean_7_cast, y = denom_7_cast)[name = tensor<string, []>("out_7_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_352_to_fp16 = const()[name = tensor<string, []>("op_352_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6956160)))];
            tensor<fp16, [1, 384, 1, 1500]> var_353_cast = add(x = out_7_cast, y = var_352_to_fp16)[name = tensor<string, []>("op_353_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_355_to_fp16 = const()[name = tensor<string, []>("op_355_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6956992)))];
            tensor<fp16, [1, 384, 1, 1500]> input_17_cast = mul(x = var_353_cast, y = var_355_to_fp16)[name = tensor<string, []>("input_17_cast")];
            tensor<int32, [2]> var_361 = const()[name = tensor<string, []>("op_361"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_363 = const()[name = tensor<string, []>("op_363"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_19_pad_type_0 = const()[name = tensor<string, []>("input_19_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_19_pad_0 = const()[name = tensor<string, []>("input_19_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [1536, 384, 1, 1]> blocks_1_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_mlp_0_weight_to_fp16"), val = tensor<fp16, [1536, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(6957824)))];
            tensor<fp16, [1536]> blocks_1_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_1_mlp_0_bias_to_fp16"), val = tensor<fp16, [1536]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(8137536)))];
            tensor<fp16, [1, 1536, 1, 1500]> input_19_cast = conv(bias = blocks_1_mlp_0_bias_to_fp16, dilations = var_363, groups = var_225, pad = input_19_pad_0, pad_type = input_19_pad_type_0, strides = var_361, weight = blocks_1_mlp_0_weight_to_fp16, x = input_17_cast)[name = tensor<string, []>("input_19_cast")];
            tensor<string, []> input_21_mode_0 = const()[name = tensor<string, []>("input_21_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 1536, 1, 1500]> input_21_cast = gelu(mode = input_21_mode_0, x = input_19_cast)[name = tensor<string, []>("input_21_cast")];
            tensor<int32, [2]> var_369 = const()[name = tensor<string, []>("op_369"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_371 = const()[name = tensor<string, []>("op_371"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_373_pad_type_0 = const()[name = tensor<string, []>("op_373_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_373_pad_0 = const()[name = tensor<string, []>("op_373_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 1536, 1, 1]> blocks_1_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_1_mlp_2_weight_to_fp16"), val = tensor<fp16, [384, 1536, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(8140672)))];
            tensor<fp16, [384]> blocks_1_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_1_mlp_2_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9320384)))];
            tensor<fp16, [1, 384, 1, 1500]> var_373_cast = conv(bias = blocks_1_mlp_2_bias_to_fp16, dilations = var_371, groups = var_225, pad = var_373_pad_0, pad_type = var_373_pad_type_0, strides = var_369, weight = blocks_1_mlp_2_weight_to_fp16, x = input_21_cast)[name = tensor<string, []>("op_373_cast")];
            tensor<fp16, [1, 384, 1, 1500]> inputs_9_cast = add(x = inputs_7_cast, y = var_373_cast)[name = tensor<string, []>("inputs_9_cast")];
            tensor<int32, []> var_382 = const()[name = tensor<string, []>("op_382"), val = tensor<int32, []>(1)];
            tensor<bool, []> var_383 = const()[name = tensor<string, []>("op_383"), val = tensor<bool, []>(true)];
            tensor<int32, [1]> var_392 = const()[name = tensor<string, []>("op_392"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_9_cast = reduce_mean(axes = var_392, keep_dims = var_383, x = inputs_9_cast)[name = tensor<string, []>("channels_mean_9_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_9_cast = sub(x = inputs_9_cast, y = channels_mean_9_cast)[name = tensor<string, []>("zero_mean_9_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_9_cast = mul(x = zero_mean_9_cast, y = zero_mean_9_cast)[name = tensor<string, []>("zero_mean_sq_9_cast")];
            tensor<int32, [1]> var_396 = const()[name = tensor<string, []>("op_396"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_397_cast = reduce_mean(axes = var_396, keep_dims = var_383, x = zero_mean_sq_9_cast)[name = tensor<string, []>("op_397_cast")];
            tensor<fp16, []> var_398_to_fp16 = const()[name = tensor<string, []>("op_398_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_399_cast = add(x = var_397_cast, y = var_398_to_fp16)[name = tensor<string, []>("op_399_cast")];
            tensor<fp16, []> denom_9_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_9_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_9_cast = rsqrt(epsilon = denom_9_epsilon_0_to_fp16, x = var_399_cast)[name = tensor<string, []>("denom_9_cast")];
            tensor<fp16, [1, 384, 1, 1500]> out_9_cast = mul(x = zero_mean_9_cast, y = denom_9_cast)[name = tensor<string, []>("out_9_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_403_to_fp16 = const()[name = tensor<string, []>("op_403_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9321216)))];
            tensor<fp16, [1, 384, 1, 1500]> var_404_cast = add(x = out_9_cast, y = var_403_to_fp16)[name = tensor<string, []>("op_404_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_406_to_fp16 = const()[name = tensor<string, []>("op_406_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9322048)))];
            tensor<fp16, [1, 384, 1, 1500]> input_23_cast = mul(x = var_404_cast, y = var_406_to_fp16)[name = tensor<string, []>("input_23_cast")];
            tensor<int32, [2]> var_414 = const()[name = tensor<string, []>("op_414"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_416 = const()[name = tensor<string, []>("op_416"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> q_5_pad_type_0 = const()[name = tensor<string, []>("q_5_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> q_5_pad_0 = const()[name = tensor<string, []>("q_5_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> var_433_weight_0_to_fp16 = const()[name = tensor<string, []>("op_433_weight_0_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9322880)))];
            tensor<fp16, [384]> var_433_bias_0_to_fp16 = const()[name = tensor<string, []>("op_433_bias_0_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9617856)))];
            tensor<fp16, [1, 384, 1, 1500]> var_433_cast = conv(bias = var_433_bias_0_to_fp16, dilations = var_416, groups = var_382, pad = q_5_pad_0, pad_type = q_5_pad_type_0, strides = var_414, weight = var_433_weight_0_to_fp16, x = input_23_cast)[name = tensor<string, []>("op_433_cast")];
            tensor<int32, [2]> var_420 = const()[name = tensor<string, []>("op_420"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_422 = const()[name = tensor<string, []>("op_422"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> k_5_pad_type_0 = const()[name = tensor<string, []>("k_5_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> k_5_pad_0 = const()[name = tensor<string, []>("k_5_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_2_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_key_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9618688)))];
            tensor<fp16, [1, 384, 1, 1500]> k_5_cast = conv(dilations = var_422, groups = var_382, pad = k_5_pad_0, pad_type = k_5_pad_type_0, strides = var_420, weight = blocks_2_attn_key_weight_to_fp16, x = input_23_cast)[name = tensor<string, []>("k_5_cast")];
            tensor<int32, [2]> var_427 = const()[name = tensor<string, []>("op_427"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_429 = const()[name = tensor<string, []>("op_429"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_431_pad_type_0 = const()[name = tensor<string, []>("op_431_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_431_pad_0 = const()[name = tensor<string, []>("op_431_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_2_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_value_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(9913664)))];
            tensor<fp16, [384]> blocks_2_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_value_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10208640)))];
            tensor<fp16, [1, 384, 1, 1500]> var_431_cast = conv(bias = blocks_2_attn_value_bias_to_fp16, dilations = var_429, groups = var_382, pad = var_431_pad_0, pad_type = var_431_pad_type_0, strides = var_427, weight = blocks_2_attn_value_weight_to_fp16, x = input_23_cast)[name = tensor<string, []>("op_431_cast")];
            tensor<int32, [6]> tile_6 = const()[name = tensor<string, []>("tile_6"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_434_axis_0 = const()[name = tensor<string, []>("op_434_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_434_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_434_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_434_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_434_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_434_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_434_cast_5 = split(axis = var_434_axis_0, split_sizes = tile_6, x = var_433_cast)[name = tensor<string, []>("op_434_cast")];
            tensor<int32, [4]> var_441_perm_0 = const()[name = tensor<string, []>("op_441_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [6]> tile_7 = const()[name = tensor<string, []>("tile_7"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_442_axis_0 = const()[name = tensor<string, []>("op_442_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 384]> transpose_2 = transpose(perm = var_441_perm_0, x = k_5_cast)[name = tensor<string, []>("transpose_2")];
            tensor<fp16, [1, 1500, 1, 64]> var_442_cast_0, tensor<fp16, [1, 1500, 1, 64]> var_442_cast_1, tensor<fp16, [1, 1500, 1, 64]> var_442_cast_2, tensor<fp16, [1, 1500, 1, 64]> var_442_cast_3, tensor<fp16, [1, 1500, 1, 64]> var_442_cast_4, tensor<fp16, [1, 1500, 1, 64]> var_442_cast_5 = split(axis = var_442_axis_0, split_sizes = tile_7, x = transpose_2)[name = tensor<string, []>("op_442_cast")];
            tensor<int32, [6]> tile_8 = const()[name = tensor<string, []>("tile_8"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_449_axis_0 = const()[name = tensor<string, []>("op_449_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_449_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_449_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_449_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_449_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_449_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_449_cast_5 = split(axis = var_449_axis_0, split_sizes = tile_8, x = var_431_cast)[name = tensor<string, []>("op_449_cast")];
            tensor<string, []> aw_25_equation_0 = const()[name = tensor<string, []>("aw_25_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_25_cast = einsum(equation = aw_25_equation_0, values = (var_442_cast_0, var_434_cast_0))[name = tensor<string, []>("aw_25_cast")];
            tensor<string, []> aw_27_equation_0 = const()[name = tensor<string, []>("aw_27_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_27_cast = einsum(equation = aw_27_equation_0, values = (var_442_cast_1, var_434_cast_1))[name = tensor<string, []>("aw_27_cast")];
            tensor<string, []> aw_29_equation_0 = const()[name = tensor<string, []>("aw_29_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_29_cast = einsum(equation = aw_29_equation_0, values = (var_442_cast_2, var_434_cast_2))[name = tensor<string, []>("aw_29_cast")];
            tensor<string, []> aw_31_equation_0 = const()[name = tensor<string, []>("aw_31_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_31_cast = einsum(equation = aw_31_equation_0, values = (var_442_cast_3, var_434_cast_3))[name = tensor<string, []>("aw_31_cast")];
            tensor<string, []> aw_33_equation_0 = const()[name = tensor<string, []>("aw_33_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_33_cast = einsum(equation = aw_33_equation_0, values = (var_442_cast_4, var_434_cast_4))[name = tensor<string, []>("aw_33_cast")];
            tensor<string, []> aw_35_equation_0 = const()[name = tensor<string, []>("aw_35_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_35_cast = einsum(equation = aw_35_equation_0, values = (var_442_cast_5, var_434_cast_5))[name = tensor<string, []>("aw_35_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_468_cast = softmax(axis = var_382, x = aw_25_cast)[name = tensor<string, []>("op_468_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_469_cast = softmax(axis = var_382, x = aw_27_cast)[name = tensor<string, []>("op_469_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_470_cast = softmax(axis = var_382, x = aw_29_cast)[name = tensor<string, []>("op_470_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_471_cast = softmax(axis = var_382, x = aw_31_cast)[name = tensor<string, []>("op_471_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_472_cast = softmax(axis = var_382, x = aw_33_cast)[name = tensor<string, []>("op_472_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_473_cast = softmax(axis = var_382, x = aw_35_cast)[name = tensor<string, []>("op_473_cast")];
            tensor<string, []> var_475_equation_0 = const()[name = tensor<string, []>("op_475_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_475_cast = einsum(equation = var_475_equation_0, values = (var_449_cast_0, var_468_cast))[name = tensor<string, []>("op_475_cast")];
            tensor<string, []> var_477_equation_0 = const()[name = tensor<string, []>("op_477_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_477_cast = einsum(equation = var_477_equation_0, values = (var_449_cast_1, var_469_cast))[name = tensor<string, []>("op_477_cast")];
            tensor<string, []> var_479_equation_0 = const()[name = tensor<string, []>("op_479_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_479_cast = einsum(equation = var_479_equation_0, values = (var_449_cast_2, var_470_cast))[name = tensor<string, []>("op_479_cast")];
            tensor<string, []> var_481_equation_0 = const()[name = tensor<string, []>("op_481_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_481_cast = einsum(equation = var_481_equation_0, values = (var_449_cast_3, var_471_cast))[name = tensor<string, []>("op_481_cast")];
            tensor<string, []> var_483_equation_0 = const()[name = tensor<string, []>("op_483_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_483_cast = einsum(equation = var_483_equation_0, values = (var_449_cast_4, var_472_cast))[name = tensor<string, []>("op_483_cast")];
            tensor<string, []> var_485_equation_0 = const()[name = tensor<string, []>("op_485_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_485_cast = einsum(equation = var_485_equation_0, values = (var_449_cast_5, var_473_cast))[name = tensor<string, []>("op_485_cast")];
            tensor<bool, []> input_25_interleave_0 = const()[name = tensor<string, []>("input_25_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 384, 1, 1500]> input_25_cast = concat(axis = var_382, interleave = input_25_interleave_0, values = (var_475_cast, var_477_cast, var_479_cast, var_481_cast, var_483_cast, var_485_cast))[name = tensor<string, []>("input_25_cast")];
            tensor<int32, [2]> var_490 = const()[name = tensor<string, []>("op_490"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_492 = const()[name = tensor<string, []>("op_492"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_494_pad_type_0 = const()[name = tensor<string, []>("op_494_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_494_pad_0 = const()[name = tensor<string, []>("op_494_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_2_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_out_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10209472)))];
            tensor<fp16, [384]> blocks_2_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_2_attn_out_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10504448)))];
            tensor<fp16, [1, 384, 1, 1500]> var_494_cast = conv(bias = blocks_2_attn_out_bias_to_fp16, dilations = var_492, groups = var_382, pad = var_494_pad_0, pad_type = var_494_pad_type_0, strides = var_490, weight = blocks_2_attn_out_weight_to_fp16, x = input_25_cast)[name = tensor<string, []>("op_494_cast")];
            tensor<fp16, [1, 384, 1, 1500]> inputs_11_cast = add(x = inputs_9_cast, y = var_494_cast)[name = tensor<string, []>("inputs_11_cast")];
            tensor<int32, [1]> var_498 = const()[name = tensor<string, []>("op_498"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_11_cast = reduce_mean(axes = var_498, keep_dims = var_383, x = inputs_11_cast)[name = tensor<string, []>("channels_mean_11_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_11_cast = sub(x = inputs_11_cast, y = channels_mean_11_cast)[name = tensor<string, []>("zero_mean_11_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_11_cast = mul(x = zero_mean_11_cast, y = zero_mean_11_cast)[name = tensor<string, []>("zero_mean_sq_11_cast")];
            tensor<int32, [1]> var_502 = const()[name = tensor<string, []>("op_502"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_503_cast = reduce_mean(axes = var_502, keep_dims = var_383, x = zero_mean_sq_11_cast)[name = tensor<string, []>("op_503_cast")];
            tensor<fp16, []> var_504_to_fp16 = const()[name = tensor<string, []>("op_504_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_505_cast = add(x = var_503_cast, y = var_504_to_fp16)[name = tensor<string, []>("op_505_cast")];
            tensor<fp16, []> denom_11_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_11_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_11_cast = rsqrt(epsilon = denom_11_epsilon_0_to_fp16, x = var_505_cast)[name = tensor<string, []>("denom_11_cast")];
            tensor<fp16, [1, 384, 1, 1500]> out_11_cast = mul(x = zero_mean_11_cast, y = denom_11_cast)[name = tensor<string, []>("out_11_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_509_to_fp16 = const()[name = tensor<string, []>("op_509_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10505280)))];
            tensor<fp16, [1, 384, 1, 1500]> var_510_cast = add(x = out_11_cast, y = var_509_to_fp16)[name = tensor<string, []>("op_510_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_512_to_fp16 = const()[name = tensor<string, []>("op_512_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10506112)))];
            tensor<fp16, [1, 384, 1, 1500]> input_27_cast = mul(x = var_510_cast, y = var_512_to_fp16)[name = tensor<string, []>("input_27_cast")];
            tensor<int32, [2]> var_518 = const()[name = tensor<string, []>("op_518"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_520 = const()[name = tensor<string, []>("op_520"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_29_pad_type_0 = const()[name = tensor<string, []>("input_29_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_29_pad_0 = const()[name = tensor<string, []>("input_29_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [1536, 384, 1, 1]> blocks_2_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_mlp_0_weight_to_fp16"), val = tensor<fp16, [1536, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(10506944)))];
            tensor<fp16, [1536]> blocks_2_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_2_mlp_0_bias_to_fp16"), val = tensor<fp16, [1536]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11686656)))];
            tensor<fp16, [1, 1536, 1, 1500]> input_29_cast = conv(bias = blocks_2_mlp_0_bias_to_fp16, dilations = var_520, groups = var_382, pad = input_29_pad_0, pad_type = input_29_pad_type_0, strides = var_518, weight = blocks_2_mlp_0_weight_to_fp16, x = input_27_cast)[name = tensor<string, []>("input_29_cast")];
            tensor<string, []> input_31_mode_0 = const()[name = tensor<string, []>("input_31_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 1536, 1, 1500]> input_31_cast = gelu(mode = input_31_mode_0, x = input_29_cast)[name = tensor<string, []>("input_31_cast")];
            tensor<int32, [2]> var_526 = const()[name = tensor<string, []>("op_526"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_528 = const()[name = tensor<string, []>("op_528"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_530_pad_type_0 = const()[name = tensor<string, []>("op_530_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_530_pad_0 = const()[name = tensor<string, []>("op_530_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 1536, 1, 1]> blocks_2_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_2_mlp_2_weight_to_fp16"), val = tensor<fp16, [384, 1536, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(11689792)))];
            tensor<fp16, [384]> blocks_2_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_2_mlp_2_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(12869504)))];
            tensor<fp16, [1, 384, 1, 1500]> var_530_cast = conv(bias = blocks_2_mlp_2_bias_to_fp16, dilations = var_528, groups = var_382, pad = var_530_pad_0, pad_type = var_530_pad_type_0, strides = var_526, weight = blocks_2_mlp_2_weight_to_fp16, x = input_31_cast)[name = tensor<string, []>("op_530_cast")];
            tensor<fp16, [1, 384, 1, 1500]> inputs_13_cast = add(x = inputs_11_cast, y = var_530_cast)[name = tensor<string, []>("inputs_13_cast")];
            tensor<int32, []> var_539 = const()[name = tensor<string, []>("op_539"), val = tensor<int32, []>(1)];
            tensor<bool, []> var_540 = const()[name = tensor<string, []>("op_540"), val = tensor<bool, []>(true)];
            tensor<int32, [1]> var_549 = const()[name = tensor<string, []>("op_549"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_13_cast = reduce_mean(axes = var_549, keep_dims = var_540, x = inputs_13_cast)[name = tensor<string, []>("channels_mean_13_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_13_cast = sub(x = inputs_13_cast, y = channels_mean_13_cast)[name = tensor<string, []>("zero_mean_13_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_13_cast = mul(x = zero_mean_13_cast, y = zero_mean_13_cast)[name = tensor<string, []>("zero_mean_sq_13_cast")];
            tensor<int32, [1]> var_553 = const()[name = tensor<string, []>("op_553"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_554_cast = reduce_mean(axes = var_553, keep_dims = var_540, x = zero_mean_sq_13_cast)[name = tensor<string, []>("op_554_cast")];
            tensor<fp16, []> var_555_to_fp16 = const()[name = tensor<string, []>("op_555_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_556_cast = add(x = var_554_cast, y = var_555_to_fp16)[name = tensor<string, []>("op_556_cast")];
            tensor<fp16, []> denom_13_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_13_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_13_cast = rsqrt(epsilon = denom_13_epsilon_0_to_fp16, x = var_556_cast)[name = tensor<string, []>("denom_13_cast")];
            tensor<fp16, [1, 384, 1, 1500]> out_13_cast = mul(x = zero_mean_13_cast, y = denom_13_cast)[name = tensor<string, []>("out_13_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_560_to_fp16 = const()[name = tensor<string, []>("op_560_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(12870336)))];
            tensor<fp16, [1, 384, 1, 1500]> var_561_cast = add(x = out_13_cast, y = var_560_to_fp16)[name = tensor<string, []>("op_561_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_563_to_fp16 = const()[name = tensor<string, []>("op_563_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(12871168)))];
            tensor<fp16, [1, 384, 1, 1500]> input_33_cast = mul(x = var_561_cast, y = var_563_to_fp16)[name = tensor<string, []>("input_33_cast")];
            tensor<int32, [2]> var_571 = const()[name = tensor<string, []>("op_571"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_573 = const()[name = tensor<string, []>("op_573"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> q_pad_type_0 = const()[name = tensor<string, []>("q_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> q_pad_0 = const()[name = tensor<string, []>("q_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> var_590_weight_0_to_fp16 = const()[name = tensor<string, []>("op_590_weight_0_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(12872000)))];
            tensor<fp16, [384]> var_590_bias_0_to_fp16 = const()[name = tensor<string, []>("op_590_bias_0_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(13166976)))];
            tensor<fp16, [1, 384, 1, 1500]> var_590_cast = conv(bias = var_590_bias_0_to_fp16, dilations = var_573, groups = var_539, pad = q_pad_0, pad_type = q_pad_type_0, strides = var_571, weight = var_590_weight_0_to_fp16, x = input_33_cast)[name = tensor<string, []>("op_590_cast")];
            tensor<int32, [2]> var_577 = const()[name = tensor<string, []>("op_577"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_579 = const()[name = tensor<string, []>("op_579"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> k_pad_type_0 = const()[name = tensor<string, []>("k_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> k_pad_0 = const()[name = tensor<string, []>("k_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_3_attn_key_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_key_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(13167808)))];
            tensor<fp16, [1, 384, 1, 1500]> k_cast = conv(dilations = var_579, groups = var_539, pad = k_pad_0, pad_type = k_pad_type_0, strides = var_577, weight = blocks_3_attn_key_weight_to_fp16, x = input_33_cast)[name = tensor<string, []>("k_cast")];
            tensor<int32, [2]> var_584 = const()[name = tensor<string, []>("op_584"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_586 = const()[name = tensor<string, []>("op_586"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_588_pad_type_0 = const()[name = tensor<string, []>("op_588_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_588_pad_0 = const()[name = tensor<string, []>("op_588_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_3_attn_value_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_value_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(13462784)))];
            tensor<fp16, [384]> blocks_3_attn_value_bias_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_value_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(13757760)))];
            tensor<fp16, [1, 384, 1, 1500]> var_588_cast = conv(bias = blocks_3_attn_value_bias_to_fp16, dilations = var_586, groups = var_539, pad = var_588_pad_0, pad_type = var_588_pad_type_0, strides = var_584, weight = blocks_3_attn_value_weight_to_fp16, x = input_33_cast)[name = tensor<string, []>("op_588_cast")];
            tensor<int32, [6]> tile_9 = const()[name = tensor<string, []>("tile_9"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_591_axis_0 = const()[name = tensor<string, []>("op_591_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_591_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_591_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_591_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_591_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_591_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_591_cast_5 = split(axis = var_591_axis_0, split_sizes = tile_9, x = var_590_cast)[name = tensor<string, []>("op_591_cast")];
            tensor<int32, [4]> var_598_perm_0 = const()[name = tensor<string, []>("op_598_perm_0"), val = tensor<int32, [4]>([0, 3, 2, 1])];
            tensor<int32, [6]> tile_10 = const()[name = tensor<string, []>("tile_10"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_599_axis_0 = const()[name = tensor<string, []>("op_599_axis_0"), val = tensor<int32, []>(3)];
            tensor<fp16, [1, 1500, 1, 384]> transpose_1 = transpose(perm = var_598_perm_0, x = k_cast)[name = tensor<string, []>("transpose_1")];
            tensor<fp16, [1, 1500, 1, 64]> var_599_cast_0, tensor<fp16, [1, 1500, 1, 64]> var_599_cast_1, tensor<fp16, [1, 1500, 1, 64]> var_599_cast_2, tensor<fp16, [1, 1500, 1, 64]> var_599_cast_3, tensor<fp16, [1, 1500, 1, 64]> var_599_cast_4, tensor<fp16, [1, 1500, 1, 64]> var_599_cast_5 = split(axis = var_599_axis_0, split_sizes = tile_10, x = transpose_1)[name = tensor<string, []>("op_599_cast")];
            tensor<int32, [6]> tile_11 = const()[name = tensor<string, []>("tile_11"), val = tensor<int32, [6]>([64, 64, 64, 64, 64, 64])];
            tensor<int32, []> var_606_axis_0 = const()[name = tensor<string, []>("op_606_axis_0"), val = tensor<int32, []>(1)];
            tensor<fp16, [1, 64, 1, 1500]> var_606_cast_0, tensor<fp16, [1, 64, 1, 1500]> var_606_cast_1, tensor<fp16, [1, 64, 1, 1500]> var_606_cast_2, tensor<fp16, [1, 64, 1, 1500]> var_606_cast_3, tensor<fp16, [1, 64, 1, 1500]> var_606_cast_4, tensor<fp16, [1, 64, 1, 1500]> var_606_cast_5 = split(axis = var_606_axis_0, split_sizes = tile_11, x = var_588_cast)[name = tensor<string, []>("op_606_cast")];
            tensor<string, []> aw_37_equation_0 = const()[name = tensor<string, []>("aw_37_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_37_cast = einsum(equation = aw_37_equation_0, values = (var_599_cast_0, var_591_cast_0))[name = tensor<string, []>("aw_37_cast")];
            tensor<string, []> aw_39_equation_0 = const()[name = tensor<string, []>("aw_39_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_39_cast = einsum(equation = aw_39_equation_0, values = (var_599_cast_1, var_591_cast_1))[name = tensor<string, []>("aw_39_cast")];
            tensor<string, []> aw_41_equation_0 = const()[name = tensor<string, []>("aw_41_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_41_cast = einsum(equation = aw_41_equation_0, values = (var_599_cast_2, var_591_cast_2))[name = tensor<string, []>("aw_41_cast")];
            tensor<string, []> aw_43_equation_0 = const()[name = tensor<string, []>("aw_43_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_43_cast = einsum(equation = aw_43_equation_0, values = (var_599_cast_3, var_591_cast_3))[name = tensor<string, []>("aw_43_cast")];
            tensor<string, []> aw_45_equation_0 = const()[name = tensor<string, []>("aw_45_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_45_cast = einsum(equation = aw_45_equation_0, values = (var_599_cast_4, var_591_cast_4))[name = tensor<string, []>("aw_45_cast")];
            tensor<string, []> aw_equation_0 = const()[name = tensor<string, []>("aw_equation_0"), val = tensor<string, []>("bkhc,bchq->bkhq")];
            tensor<fp16, [1, 1500, 1, 1500]> aw_cast = einsum(equation = aw_equation_0, values = (var_599_cast_5, var_591_cast_5))[name = tensor<string, []>("aw_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_625_cast = softmax(axis = var_539, x = aw_37_cast)[name = tensor<string, []>("op_625_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_626_cast = softmax(axis = var_539, x = aw_39_cast)[name = tensor<string, []>("op_626_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_627_cast = softmax(axis = var_539, x = aw_41_cast)[name = tensor<string, []>("op_627_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_628_cast = softmax(axis = var_539, x = aw_43_cast)[name = tensor<string, []>("op_628_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_629_cast = softmax(axis = var_539, x = aw_45_cast)[name = tensor<string, []>("op_629_cast")];
            tensor<fp16, [1, 1500, 1, 1500]> var_630_cast = softmax(axis = var_539, x = aw_cast)[name = tensor<string, []>("op_630_cast")];
            tensor<string, []> var_632_equation_0 = const()[name = tensor<string, []>("op_632_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_632_cast = einsum(equation = var_632_equation_0, values = (var_606_cast_0, var_625_cast))[name = tensor<string, []>("op_632_cast")];
            tensor<string, []> var_634_equation_0 = const()[name = tensor<string, []>("op_634_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_634_cast = einsum(equation = var_634_equation_0, values = (var_606_cast_1, var_626_cast))[name = tensor<string, []>("op_634_cast")];
            tensor<string, []> var_636_equation_0 = const()[name = tensor<string, []>("op_636_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_636_cast = einsum(equation = var_636_equation_0, values = (var_606_cast_2, var_627_cast))[name = tensor<string, []>("op_636_cast")];
            tensor<string, []> var_638_equation_0 = const()[name = tensor<string, []>("op_638_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_638_cast = einsum(equation = var_638_equation_0, values = (var_606_cast_3, var_628_cast))[name = tensor<string, []>("op_638_cast")];
            tensor<string, []> var_640_equation_0 = const()[name = tensor<string, []>("op_640_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_640_cast = einsum(equation = var_640_equation_0, values = (var_606_cast_4, var_629_cast))[name = tensor<string, []>("op_640_cast")];
            tensor<string, []> var_642_equation_0 = const()[name = tensor<string, []>("op_642_equation_0"), val = tensor<string, []>("bchk,bkhq->bchq")];
            tensor<fp16, [1, 64, 1, 1500]> var_642_cast = einsum(equation = var_642_equation_0, values = (var_606_cast_5, var_630_cast))[name = tensor<string, []>("op_642_cast")];
            tensor<bool, []> input_35_interleave_0 = const()[name = tensor<string, []>("input_35_interleave_0"), val = tensor<bool, []>(false)];
            tensor<fp16, [1, 384, 1, 1500]> input_35_cast = concat(axis = var_539, interleave = input_35_interleave_0, values = (var_632_cast, var_634_cast, var_636_cast, var_638_cast, var_640_cast, var_642_cast))[name = tensor<string, []>("input_35_cast")];
            tensor<int32, [2]> var_647 = const()[name = tensor<string, []>("op_647"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_649 = const()[name = tensor<string, []>("op_649"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_651_pad_type_0 = const()[name = tensor<string, []>("op_651_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_651_pad_0 = const()[name = tensor<string, []>("op_651_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 384, 1, 1]> blocks_3_attn_out_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_out_weight_to_fp16"), val = tensor<fp16, [384, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(13758592)))];
            tensor<fp16, [384]> blocks_3_attn_out_bias_to_fp16 = const()[name = tensor<string, []>("blocks_3_attn_out_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(14053568)))];
            tensor<fp16, [1, 384, 1, 1500]> var_651_cast = conv(bias = blocks_3_attn_out_bias_to_fp16, dilations = var_649, groups = var_539, pad = var_651_pad_0, pad_type = var_651_pad_type_0, strides = var_647, weight = blocks_3_attn_out_weight_to_fp16, x = input_35_cast)[name = tensor<string, []>("op_651_cast")];
            tensor<fp16, [1, 384, 1, 1500]> inputs_15_cast = add(x = inputs_13_cast, y = var_651_cast)[name = tensor<string, []>("inputs_15_cast")];
            tensor<int32, [1]> var_655 = const()[name = tensor<string, []>("op_655"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_15_cast = reduce_mean(axes = var_655, keep_dims = var_540, x = inputs_15_cast)[name = tensor<string, []>("channels_mean_15_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_15_cast = sub(x = inputs_15_cast, y = channels_mean_15_cast)[name = tensor<string, []>("zero_mean_15_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_15_cast = mul(x = zero_mean_15_cast, y = zero_mean_15_cast)[name = tensor<string, []>("zero_mean_sq_15_cast")];
            tensor<int32, [1]> var_659 = const()[name = tensor<string, []>("op_659"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_660_cast = reduce_mean(axes = var_659, keep_dims = var_540, x = zero_mean_sq_15_cast)[name = tensor<string, []>("op_660_cast")];
            tensor<fp16, []> var_661_to_fp16 = const()[name = tensor<string, []>("op_661_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_662_cast = add(x = var_660_cast, y = var_661_to_fp16)[name = tensor<string, []>("op_662_cast")];
            tensor<fp16, []> denom_15_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_15_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_15_cast = rsqrt(epsilon = denom_15_epsilon_0_to_fp16, x = var_662_cast)[name = tensor<string, []>("denom_15_cast")];
            tensor<fp16, [1, 384, 1, 1500]> out_15_cast = mul(x = zero_mean_15_cast, y = denom_15_cast)[name = tensor<string, []>("out_15_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_666_to_fp16 = const()[name = tensor<string, []>("op_666_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(14054400)))];
            tensor<fp16, [1, 384, 1, 1500]> var_667_cast = add(x = out_15_cast, y = var_666_to_fp16)[name = tensor<string, []>("op_667_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_669_to_fp16 = const()[name = tensor<string, []>("op_669_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(14055232)))];
            tensor<fp16, [1, 384, 1, 1500]> input_37_cast = mul(x = var_667_cast, y = var_669_to_fp16)[name = tensor<string, []>("input_37_cast")];
            tensor<int32, [2]> var_675 = const()[name = tensor<string, []>("op_675"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_677 = const()[name = tensor<string, []>("op_677"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> input_39_pad_type_0 = const()[name = tensor<string, []>("input_39_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> input_39_pad_0 = const()[name = tensor<string, []>("input_39_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [1536, 384, 1, 1]> blocks_3_mlp_0_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_mlp_0_weight_to_fp16"), val = tensor<fp16, [1536, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(14056064)))];
            tensor<fp16, [1536]> blocks_3_mlp_0_bias_to_fp16 = const()[name = tensor<string, []>("blocks_3_mlp_0_bias_to_fp16"), val = tensor<fp16, [1536]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(15235776)))];
            tensor<fp16, [1, 1536, 1, 1500]> input_39_cast = conv(bias = blocks_3_mlp_0_bias_to_fp16, dilations = var_677, groups = var_539, pad = input_39_pad_0, pad_type = input_39_pad_type_0, strides = var_675, weight = blocks_3_mlp_0_weight_to_fp16, x = input_37_cast)[name = tensor<string, []>("input_39_cast")];
            tensor<string, []> input_mode_0 = const()[name = tensor<string, []>("input_mode_0"), val = tensor<string, []>("EXACT")];
            tensor<fp16, [1, 1536, 1, 1500]> input_cast = gelu(mode = input_mode_0, x = input_39_cast)[name = tensor<string, []>("input_cast")];
            tensor<int32, [2]> var_683 = const()[name = tensor<string, []>("op_683"), val = tensor<int32, [2]>([1, 1])];
            tensor<int32, [2]> var_685 = const()[name = tensor<string, []>("op_685"), val = tensor<int32, [2]>([1, 1])];
            tensor<string, []> var_687_pad_type_0 = const()[name = tensor<string, []>("op_687_pad_type_0"), val = tensor<string, []>("custom")];
            tensor<int32, [4]> var_687_pad_0 = const()[name = tensor<string, []>("op_687_pad_0"), val = tensor<int32, [4]>([0, 0, 0, 0])];
            tensor<fp16, [384, 1536, 1, 1]> blocks_3_mlp_2_weight_to_fp16 = const()[name = tensor<string, []>("blocks_3_mlp_2_weight_to_fp16"), val = tensor<fp16, [384, 1536, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(15238912)))];
            tensor<fp16, [384]> blocks_3_mlp_2_bias_to_fp16 = const()[name = tensor<string, []>("blocks_3_mlp_2_bias_to_fp16"), val = tensor<fp16, [384]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(16418624)))];
            tensor<fp16, [1, 384, 1, 1500]> var_687_cast = conv(bias = blocks_3_mlp_2_bias_to_fp16, dilations = var_685, groups = var_539, pad = var_687_pad_0, pad_type = var_687_pad_type_0, strides = var_683, weight = blocks_3_mlp_2_weight_to_fp16, x = input_cast)[name = tensor<string, []>("op_687_cast")];
            tensor<fp16, [1, 384, 1, 1500]> inputs_cast = add(x = inputs_15_cast, y = var_687_cast)[name = tensor<string, []>("inputs_cast")];
            tensor<bool, []> var_691 = const()[name = tensor<string, []>("op_691"), val = tensor<bool, []>(true)];
            tensor<int32, [1]> var_695 = const()[name = tensor<string, []>("op_695"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> channels_mean_cast = reduce_mean(axes = var_695, keep_dims = var_691, x = inputs_cast)[name = tensor<string, []>("channels_mean_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_cast = sub(x = inputs_cast, y = channels_mean_cast)[name = tensor<string, []>("zero_mean_cast")];
            tensor<fp16, [1, 384, 1, 1500]> zero_mean_sq_cast = mul(x = zero_mean_cast, y = zero_mean_cast)[name = tensor<string, []>("zero_mean_sq_cast")];
            tensor<int32, [1]> var_699 = const()[name = tensor<string, []>("op_699"), val = tensor<int32, [1]>([1])];
            tensor<fp16, [1, 1, 1, 1500]> var_700_cast = reduce_mean(axes = var_699, keep_dims = var_691, x = zero_mean_sq_cast)[name = tensor<string, []>("op_700_cast")];
            tensor<fp16, []> var_701_to_fp16 = const()[name = tensor<string, []>("op_701_to_fp16"), val = tensor<fp16, []>(0x1.5p-17)];
            tensor<fp16, [1, 1, 1, 1500]> var_702_cast = add(x = var_700_cast, y = var_701_to_fp16)[name = tensor<string, []>("op_702_cast")];
            tensor<fp16, []> denom_epsilon_0_to_fp16 = const()[name = tensor<string, []>("denom_epsilon_0_to_fp16"), val = tensor<fp16, []>(0x1p-24)];
            tensor<fp16, [1, 1, 1, 1500]> denom_cast = rsqrt(epsilon = denom_epsilon_0_to_fp16, x = var_702_cast)[name = tensor<string, []>("denom_cast")];
            tensor<fp16, [1, 384, 1, 1500]> out_17_cast = mul(x = zero_mean_cast, y = denom_cast)[name = tensor<string, []>("out_17_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_706_to_fp16 = const()[name = tensor<string, []>("op_706_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(16419456)))];
            tensor<fp16, [1, 384, 1, 1500]> var_707_cast = add(x = out_17_cast, y = var_706_to_fp16)[name = tensor<string, []>("op_707_cast")];
            tensor<fp16, [1, 384, 1, 1]> var_709_to_fp16 = const()[name = tensor<string, []>("op_709_to_fp16"), val = tensor<fp16, [1, 384, 1, 1]>(BLOBFILE(path = tensor<string, []>("@model_path/weights/weight.bin"), offset = tensor<uint64, []>(16420288)))];
            tensor<fp16, [1, 384, 1, 1500]> x_cast = mul(x = var_707_cast, y = var_709_to_fp16)[name = tensor<string, []>("x_cast")];
            tensor<int32, [1]> var_712_axes_0 = const()[name = tensor<string, []>("op_712_axes_0"), val = tensor<int32, [1]>([2])];
            tensor<fp16, [1, 384, 1500]> var_712_cast = squeeze(axes = var_712_axes_0, x = x_cast)[name = tensor<string, []>("op_712_cast")];
            tensor<int32, [3]> var_715_perm_0 = const()[name = tensor<string, []>("op_715_perm_0"), val = tensor<int32, [3]>([0, 2, 1])];
            tensor<string, []> var_715_cast_to_fp32_dtype_0 = const()[name = tensor<string, []>("op_715_cast_to_fp32_dtype_0"), val = tensor<string, []>("fp32")];
            tensor<fp16, [1, 1500, 384]> transpose_0 = transpose(perm = var_715_perm_0, x = var_712_cast)[name = tensor<string, []>("transpose_0")];
            tensor<fp32, [1, 1500, 384]> output = cast(dtype = var_715_cast_to_fp32_dtype_0, x = transpose_0)[name = tensor<string, []>("cast_18")];
        } -> (output);
}